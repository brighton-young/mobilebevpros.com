/**
 * Creates an object with the same keys as `obj` and values generated by running
 * each property of `obj` through `fn`. The `fn` is invoked with one argument:
 * (value).
 *
 * @param obj The object to map over
 * @param fn The function invoked per value in `obj`
 *
 * @example
 * const from = { a: 1, b: 2, c: 3 };
 * mapObject(from, (value) => value * 2); // { a: 2, b: 4, c: 6 }
 */
const mapObject = <F, T>(
  obj: Record<string, F>,
  fn: (value: F) => T,
): Record<string, T> => {
  return Object.keys(obj).reduce((acc, key) => {
    acc[key] = fn(obj[key]);
    return acc;
  }, {});
};

export default mapObject;
